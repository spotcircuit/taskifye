// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Agency - Top level account that owns multiple clients
model Agency {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  email         String
  phone         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  clients       Client[]
  users         User[]   // Agency-level users who can access all clients
}

// Client - Individual business under an agency (renamed from Tenant)
model Client {
  id            String   @id @default(uuid())
  agencyId      String
  agency        Agency   @relation(fields: [agencyId], references: [id])
  
  // Basic info
  name          String
  slug          String   @unique
  businessType  String?  // HVAC, Plumbing, Painting, etc.
  email         String?
  phone         String?
  website       String?
  isActive      Boolean  @default(true)
  
  // Branding
  branding      Branding?
  
  // API Settings
  apiSettings   ApiSettings?
  
  // Other settings
  settings      Json?    // General client-specific settings
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  users         ClientUser[]
  jobs          Job[]
  payments      Payment[]
  smsMessages   SmsMessage[]
  
  @@index([agencyId])
}

// Branding settings per client
model Branding {
  id            String   @id @default(uuid())
  clientId      String   @unique
  client        Client   @relation(fields: [clientId], references: [id])
  
  // Colors
  primaryColor  String   @default("#3B82F6") // Blue-600
  secondaryColor String  @default("#10B981") // Green-500
  accentColor   String   @default("#F59E0B") // Amber-500
  
  // Logo & Images
  logoUrl       String?
  faviconUrl    String?
  
  // Company Info
  companyName   String?
  tagline       String?
  
  // Contact Info (for client communications)
  supportEmail  String?
  supportPhone  String?
  
  // Custom CSS (advanced)
  customCss     String?
  
  updatedAt     DateTime @updatedAt
}

// API credentials per client
model ApiSettings {
  id                    String   @id @default(uuid())
  clientId              String   @unique
  client                Client   @relation(fields: [clientId], references: [id])
  
  // Pipedrive
  pipedriveApiKey       String?  @db.Text // Encrypted
  pipedriveCompanyDomain String?
  
  // Twilio
  twilioAccountSid      String?
  twilioAuthToken       String?  @db.Text // Encrypted
  twilioPhoneNumber     String?
  
  // ReachInbox
  reachInboxApiKey      String?  @db.Text // Encrypted
  reachInboxWorkspaceId String?
  
  // QuickBooks
  quickbooksClientId    String?
  quickbooksClientSecret String? @db.Text // Encrypted
  quickbooksRealmId     String?
  quickbooksRefreshToken String? @db.Text // Encrypted
  
  // Other integrations
  googleMapsApiKey      String?  @db.Text // Encrypted
  openAiApiKey          String?  @db.Text // Encrypted
  
  updatedAt             DateTime @updatedAt
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String   // Hashed
  role          String   @default("user") // super_admin, agency_admin, client_admin, user
  
  // Agency association (for agency-level users)
  agencyId      String?
  agency        Agency?  @relation(fields: [agencyId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  clientAccess  ClientUser[]
  assignedJobs  Job[]    @relation("TechnicianJobs")
  jobChanges    JobStatusHistory[]
}

// Many-to-many relationship for users accessing clients
model ClientUser {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id])
  
  role          String   @default("user") // admin, manager, technician, user
  permissions   Json?    // Granular permissions if needed
  
  createdAt     DateTime @default(now())
  
  @@unique([userId, clientId])
  @@index([clientId])
  @@index([userId])
}

// Core job tracking
model Job {
  id                  String   @id @default(uuid())
  jobNumber           String   @unique
  clientId            String
  client              Client   @relation(fields: [clientId], references: [id])
  
  // Pipedrive integration
  pipedriveDeaId     Int?
  pipedrivPersonId   Int?
  pipedriveOrgId     Int?
  
  // Job details
  status              JobStatus @default(LEAD)
  serviceType         String?
  description         String?
  
  // Customer info (cached from Pipedrive)
  customerName        String
  customerEmail       String?
  customerPhone       String?
  customerAddress     String?
  
  // Scheduling
  scheduledDate       DateTime?
  scheduledDuration   Int?      // minutes
  assignedTechId      String?
  assignedTech        User?     @relation("TechnicianJobs", fields: [assignedTechId], references: [id])
  
  // Completion
  startedAt           DateTime?
  completedAt         DateTime?
  completionNotes     String?
  photos              Json?     // Array of photo URLs
  signatureUrl        String?
  
  // Financials
  quotedAmount        Decimal?  @db.Decimal(10, 2)
  finalAmount         Decimal?  @db.Decimal(10, 2)
  paymentStatus       PaymentStatus @default(PENDING)
  
  // Metadata
  customFields        Json?     // Store any custom data
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  statusHistory       JobStatusHistory[]
  payments            Payment[]
  activities          JobActivity[]
  smsMessages         SmsMessage[]
  
  @@index([clientId, status])
  @@index([clientId, scheduledDate])
  @@index([pipedriveDeaId])
}

model JobStatusHistory {
  id            String    @id @default(uuid())
  jobId         String
  job           Job       @relation(fields: [jobId], references: [id])
  fromStatus    JobStatus?
  toStatus      JobStatus
  changedBy     String?
  changedByUser User?     @relation(fields: [changedBy], references: [id])
  notes         String?
  createdAt     DateTime  @default(now())
  
  @@index([jobId])
}

model Payment {
  id              String   @id @default(uuid())
  jobId           String
  job             Job      @relation(fields: [jobId], references: [id])
  clientId        String
  client          Client   @relation(fields: [clientId], references: [id])
  
  amount          Decimal  @db.Decimal(10, 2)
  method          PaymentMethod
  referenceNumber String?  // Check number, transaction ID, etc.
  receivedDate    DateTime
  notes           String?
  
  createdAt       DateTime @default(now())
  
  @@index([jobId])
  @@index([clientId, receivedDate])
}

model JobActivity {
  id              String   @id @default(uuid())
  jobId           String
  job             Job      @relation(fields: [jobId], references: [id])
  
  type            String   // "note", "email", "call", "site_visit", etc.
  subject         String
  description     String?
  pipedriveActivityId Int? // Link to Pipedrive activity if created there
  
  createdAt       DateTime @default(now())
  
  @@index([jobId])
}

model SmsMessage {
  id              String   @id @default(uuid())
  jobId           String?
  job             Job?     @relation(fields: [jobId], references: [id])
  clientId        String
  client          Client   @relation(fields: [clientId], references: [id])
  
  to              String
  from            String
  message         String
  direction       String   // "outbound" or "inbound"
  status          String   // "queued", "sent", "delivered", "failed"
  twilioSid       String?
  
  sentAt          DateTime @default(now())
  deliveredAt     DateTime?
  
  @@index([jobId])
  @@index([clientId, sentAt])
}

// Cache for fast dashboard reads
model CachedStats {
  id              String   @id @default(uuid())
  clientId        String   @unique
  
  stats           Json     // Store aggregated stats
  lastUpdated     DateTime @default(now())
}

// Enums
enum JobStatus {
  LEAD
  QUOTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  INVOICED
  PAID
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  CHECK
  CARD
  ACH
  OTHER
}