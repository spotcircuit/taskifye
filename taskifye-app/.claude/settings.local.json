{
  "permissions": {
    "allow": [
      "Bash(rm:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(node:*)",
      "Bash(PIPEDRIVE_API_KEY=\"$PIPEDRIVE_API_KEY:-$(grep PIPEDRIVE_API_KEY .env.local 2>/dev/null | cut -d= -f2)\" node test-pipedrive-connection.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node test-pipedrive-connection.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node wipe-and-seed-pipedrive.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node -e \"\nimport https from ''https'';\n\nconst API_KEY = process.env.PIPEDRIVE_API_KEY;\n\nasync function makeRequest(endpoint, method = ''GET'', data = null) {\n  return new Promise((resolve, reject) => {\n    const url = \\`https://api.pipedrive.com/v1${endpoint}${endpoint.includes(''?'') ? ''&'' : ''?''}api_token=${API_KEY}\\`;\n    const urlObj = new URL(url);\n    \n    const options = {\n      hostname: urlObj.hostname,\n      path: urlObj.pathname + urlObj.search,\n      method: method,\n      headers: {\n        ''Content-Type'': ''application/json'',\n        ''Accept'': ''application/json''\n      }\n    };\n\n    const req = https.request(options, (res) => {\n      let responseData = '''';\n      res.on(''data'', (chunk) => responseData += chunk);\n      res.on(''end'', () => {\n        try {\n          const parsed = JSON.parse(responseData);\n          resolve(parsed);\n        } catch (e) {\n          reject(new Error(''Invalid JSON response''));\n        }\n      });\n    });\n\n    req.on(''error'', reject);\n    \n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\nasync function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconsole.log(''üå± Quick seed with correct fields...'');\n\n// Create organizations first\nconst orgs = [\n  { name: ''Prime Properties LLC'', address: ''1234 Oak Ave, Austin, TX 78701'' },\n  { name: ''Metro Office Centers'', address: ''5678 Main St, Houston, TX 77001'' },\n  { name: ''Valley Medical Group'', address: ''3456 Cedar Ln, San Antonio, TX 78201'' }\n];\n\nconst createdOrgs = [];\n\nfor (const org of orgs) {\n  try {\n    const response = await makeRequest(''/organizations'', ''POST'', org);\n    if (response.success && response.data) {\n      createdOrgs.push(response.data);\n      console.log(\\`‚úÖ Created org: ${org.name}\\`);\n    } else {\n      console.log(\\`‚ùå Failed org: ${org.name} - ${response.error}\\`);\n    }\n  } catch (error) {\n    console.log(\\`‚ùå Error org: ${org.name} - ${error.message}\\`);\n  }\n  await delay(200);\n}\n\n// Create persons\nconst persons = [\n  { first: ''John'', last: ''Smith'', title: ''Facility Manager'' },\n  { first: ''Sarah'', last: ''Johnson'', title: ''Property Manager'' },\n  { first: ''Michael'', last: ''Williams'', title: ''Maintenance Director'' }\n];\n\nconst createdPersons = [];\n\nfor (let i = 0; i < persons.length && i < createdOrgs.length; i++) {\n  const person = persons[i];\n  const org = createdOrgs[i];\n  \n  try {\n    const personData = {\n      name: \\`${person.first} ${person.last}\\`,\n      email: [\\`${person.first.toLowerCase()}.${person.last.toLowerCase()}@company.com\\`],\n      phone: [''(512) 555-0123''],\n      job_title: person.title,\n      org_id: org.id\n    };\n\n    const response = await makeRequest(''/persons'', ''POST'', personData);\n    if (response.success && response.data) {\n      createdPersons.push(response.data);\n      console.log(\\`‚úÖ Created person: ${person.first} ${person.last}\\`);\n    } else {\n      console.log(\\`‚ùå Failed person: ${person.first} ${person.last} - ${response.error}\\`);\n    }\n  } catch (error) {\n    console.log(\\`‚ùå Error person: ${person.first} ${person.last} - ${error.message}\\`);\n  }\n  await delay(200);\n}\n\n// Create a few deals\nconst services = [''HVAC Installation'', ''HVAC Repair'', ''Maintenance Contract''];\n\nfor (let i = 0; i < 5 && createdPersons.length > 0 && createdOrgs.length > 0; i++) {\n  const service = services[i % services.length];\n  const person = createdPersons[i % createdPersons.length];\n  const org = createdOrgs[i % createdOrgs.length];\n  \n  try {\n    const dealData = {\n      title: \\`${service} - ${person.name}\\`,\n      value: Math.floor(Math.random() * 5000) + 1000,\n      currency: ''USD'',\n      person_id: person.id,\n      org_id: org.id,\n      stage_id: 1 // First stage\n    };\n\n    const response = await makeRequest(''/deals'', ''POST'', dealData);\n    if (response.success && response.data) {\n      console.log(\\`‚úÖ Created deal: ${service} - $${dealData.value}\\`);\n    } else {\n      console.log(\\`‚ùå Failed deal: ${service} - ${response.error}\\`);\n    }\n  } catch (error) {\n    console.log(\\`‚ùå Error deal: ${service} - ${error.message}\\`);\n  }\n  await delay(200);\n}\n\nconsole.log(''‚úÖ Quick seed completed! Check your app now.'');\n\")",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node quick-seed.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node seed-with-products.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node simple-products-seed.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node comprehensive-seed.mjs)",
      "Bash(PIPEDRIVE_API_KEY=2911f330137024c4d04b3e0256f67d7a83102f1a node create-more-leads.mjs)",
      "Bash(npm pkg set:*)",
      "Bash(npm run build:*)",
      "Bash(npx vercel:*)",
      "Bash(git add:*)",
      "Bash(git rm:*)",
      "Bash(npx prisma generate:*)",
      "Bash(ls:*)",
      "Bash(npm:*)",
      "Bash(git commit:*)",
      "Bash(npx tsc:*)",
      "Bash(find:*)",
      "Bash(npx prisma:*)",
      "Bash(DATABASE_URL=\"file:./dev.db\" npx prisma db push)",
      "Bash(DATABASE_URL=\"file:./dev.db\" npx prisma db seed)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(DATABASE_URL=\"file:./dev.db\" npm run seed)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(source ~/.bashrc)",
      "Bash(turso:*)",
      "Bash(export:*)",
      "Bash(chmod:*)"
    ],
    "deny": []
  }
}